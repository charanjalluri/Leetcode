# **Leetcode Problem #75 - Sort Colors**  

## **📌 Problem Statement**  
Given an array `nums` with `n` objects colored **red (0)**, **white (1)**, or **blue (2)**, sort them **in-place** so that objects of the same color are adjacent, with colors in the order **red, white, and blue**.  

### **🔹 Example 1:**  
```python
Input: nums = [2, 0, 2, 1, 1, 0]  
Output: [0, 0, 1, 1, 2, 2]  
```

### **🔹 Example 2:**  
```python
Input: nums = [2, 0, 1]  
Output: [0, 1, 2]  
```

### **🔹 Example 3:**  
```python
Input: nums = [0]  
Output: [0]  
```

### **🔹 Example 4:**  
```python
Input: nums = [1]  
Output: [1]  
```

---

## **🚀 Solution Approach (Dutch National Flag Algorithm)**  
The **Dutch National Flag Algorithm** sorts the array in **one pass (O(n))**:  
- Use three pointers: **left (0s), mid (1s), and right (2s)**.  
- Iterate through the array and swap elements to their correct positions.  

---

## **📝 Optimized Python Solution**  
```python
class Solution:
    def sortColors(self, nums):
        left, mid, right = 0, 0, len(nums) - 1

        while mid <= right:
            if nums[mid] == 0:
                nums[left], nums[mid] = nums[mid], nums[left]
                left += 1
                mid += 1
            elif nums[mid] == 1:
                mid += 1
            else:
                nums[mid], nums[right] = nums[right], nums[mid]
                right -= 1

# Example usage:
nums = [2, 0, 2, 1, 1, 0]
sol = Solution()
sol.sortColors(nums)
print(nums)  # Output: [0, 0, 1, 1, 2, 2]
```

---

## **⏳ Time & Space Complexity**  
✅ **Time Complexity:** `O(n)`, single pass through the array.  
✅ **Space Complexity:** `O(1)`, in-place sorting.  

---


---

## **⭐ Follow for More**  
If you found this helpful, **⭐ star** the repo and follow me on GitHub! 🚀😊  
