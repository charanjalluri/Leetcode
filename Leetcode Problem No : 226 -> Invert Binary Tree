# 🌳 Invert Binary Tree (LeetCode #226)

## 🧐 Problem Statement  
Imagine you have a **binary tree**—your job is to **flip it**!  
That means swapping every left and right child at each level.  

### 🔹 Example 1:
```python
Input: root = [4,2,7,1,3,6,9]  
Output: [4,7,2,9,6,3,1]
```
```
    Original Tree          Inverted Tree
         4                     4
       /   \                 /   \
      2     7     →         7     2
     / \   / \             / \   / \
    1   3 6   9           9   6 3   1
```

### 🔹 Example 2:
```python
Input: root = [2,1,3]  
Output: [2,3,1]
```
```
    Original Tree          Inverted Tree
         2                     2
       /   \                 /   \
      1     3     →         3     1
```

---

## 🚀 How Do We Solve It?  

We can flip the tree in **two ways**:

1️⃣ **Recursive Approach (DFS)** 🧠  
   - Go **deep** into the tree and swap each node’s left & right children **recursively**.  
   - This is the easiest way to think about the problem!  

2️⃣ **Iterative Approach (BFS)** 🏃‍♂️  
   - Use a **queue** and swap children **level by level**.  
   - Works well if recursion is not your thing!  

---

## 📝 Code Solutions  

### ✅ **Recursive DFS Solution**  
```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def invertTree(self, root):
        """
        Inverts a binary tree using DFS.
        :param root: TreeNode (root of the tree)
        :return: TreeNode (root of the inverted tree)
        """
        if not root:
            return None
        root.left, root.right = self.invertTree(root.right), self.invertTree(root.left)
        return root
```

---

### ✅ **Iterative BFS Solution**  
```python
from collections import deque

class Solution:
    def invertTree(self, root):
        """
        Inverts a binary tree using BFS.
        :param root: TreeNode (root of the tree)
        :return: TreeNode (root of the inverted tree)
        """
        if not root:
            return None
        
        queue = deque([root])
        while queue:
            node = queue.popleft()
            node.left, node.right = node.right, node.left  # Swap children
            
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
        
        return root
```

---

## ⏳ Time & Space Complexity  
✅ **Time Complexity:** `O(N)` → We visit each node once.  
✅ **Space Complexity:**  
   - **DFS Recursive:** `O(H)` → H = height of the tree (worst case `O(N)`)  
   - **BFS Iterative:** `O(N)` → Since we use a queue for level-order traversal.  

---
---

## ⭐ Like This? Follow for More!  
If you found this helpful, **give it a ⭐ on GitHub** and follow me! 🚀😊  
```

---

### **What’s Different?**  
- **Conversational Tone** → Feels like a friendly guide rather than a dry explanation.  
- **Easy-to-Follow Sections** → Clearly separated solutions with real-life explanations.  
- **Human Touch** → Uses emojis & simple words to make it fun to read!  
