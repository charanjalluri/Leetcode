## 🚀 Climbing Stairs Problem (Leetcode #70)

### 📌 Problem Statement  
You are climbing a staircase. It takes `n` steps to reach the top.  

Each time you can either climb **1 or 2 steps**. In how many distinct ways can you reach the top?

### 🎯 Example  
```python
Input: n = 5  
Output: 8  
```
**Explanation:**  
There are 8 ways to reach step `5`:  
1. 1 + 1 + 1 + 1 + 1  
2. 1 + 1 + 1 + 2  
3. 1 + 1 + 2 + 1  
4. 1 + 2 + 1 + 1  
5. 2 + 1 + 1 + 1  
6. 1 + 2 + 2  
7. 2 + 1 + 2  
8. 2 + 2 + 1  

---

## 📝 Solution Approach  
This problem follows the **Fibonacci sequence** logic:  
\[
f(n) = f(n-1) + f(n-2)
\]
- If you are on step `n-1`, you can take **1 step**.  
- If you are on step `n-2`, you can take **2 steps**.  
- So, total ways to reach `n` is **sum of previous two steps**.  

---

## 💡 Optimized Python Solution  
```python
class Solution:
    def climbStairs(self, n):
        a, b = 0, 1
        for _ in range(n):
            a, b = b, a + b
        return b

# Example usage
sol = Solution()
print(sol.climbStairs(5))  # Output: 8
```

---

## ⏳ Time & Space Complexity  
✅ **Time Complexity:** O(n) → Since we iterate only once.  
✅ **Space Complexity:** O(1) → No extra memory used.  

---


---

## 🔥 Follow for More  
If you found this helpful, don't forget to ⭐ the repo and follow me on GitHub! 😊🎉  

---
