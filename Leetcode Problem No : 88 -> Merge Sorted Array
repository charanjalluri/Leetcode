Leetcode Problem **#88 - Merge Sorted Array**  

### **Problem Statement:**  
You are given two integer arrays **nums1** and **nums2**, sorted in **non-decreasing order**, and two integers **m** and **n**, representing the number of elements in **nums1** and **nums2** respectively.  

Merge **nums2** into **nums1** as one **sorted array**.  

The final merged array should be stored inside **nums1**, modifying it in-place.  

---

### **Example 1:**  
```python
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3  
Output: [1,2,2,3,5,6]  
Explanation: The arrays are merged and sorted.  
```

### **Example 2:**  
```python
Input: nums1 = [1], m = 1, nums2 = [], n = 0  
Output: [1]  
Explanation: No elements from nums2, so nums1 remains the same.  
```

### **Example 3:**  
```python
Input: nums1 = [0], m = 0, nums2 = [1], n = 1  
Output: [1]  
Explanation: nums1 has no valid elements; nums2 is copied.  
```

---

## **🚀 Solution Approach**
We solve this problem using a **two-pointer approach**, starting from the **end** of both arrays:  
1. Start from the last element of both `nums1` (excluding extra space) and `nums2`.  
2. Compare elements from `nums1` and `nums2`, placing the larger one at the last available position in `nums1`.  
3. If elements remain in `nums2`, copy them to `nums1`.  

---

## **📝 Optimized Python Solution**
```python
class Solution:
    def merge(self, nums1, m, nums2, n):
        # Pointers for nums1, nums2, and the last index
        i, j, k = m - 1, n - 1, m + n - 1

        # Merge from the end
        while i >= 0 and j >= 0:
            if nums1[i] > nums2[j]:
                nums1[k] = nums1[i]
                i -= 1
            else:
                nums1[k] = nums2[j]
                j -= 1
            k -= 1

        # If elements are left in nums2, copy them to nums1
        while j >= 0:
            nums1[k] = nums2[j]
            j -= 1
            k -= 1

# Example usage:
sol = Solution()
nums1 = [1,2,3,0,0,0]
nums2 = [2,5,6]
sol.merge(nums1, 3, nums2, 3)
print(nums1)  # Output: [1,2,2,3,5,6]
```

---

## **⏳ Time & Space Complexity**
✅ **Time Complexity:** `O(m + n)`, as we iterate through both arrays once.  
✅ **Space Complexity:** `O(1)`, as merging is done **in-place**.  

---


---

## **⭐ Follow for More**
If you found this helpful, **⭐ star** the repo and follow me on GitHub! 🚀😊  

---
