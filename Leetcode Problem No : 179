# **Leetcode Problem #179 - Largest Number**  

## **📌 Problem Statement**  
Given a list of non-negative integers `nums`, arrange them such that they form the **largest number** and return it as a string.  

### **🔹 Example 1:**  
```python
Input: nums = [10,2]  
Output: "210"  
```

### **🔹 Example 2:**  
```python
Input: nums = [3,30,34,5,9]  
Output: "9534330"  
```

### **🔹 Example 3:**  
```python
Input: nums = [1]  
Output: "1"  
```

### **🔹 Example 4:**  
```python
Input: nums = [10]  
Output: "10"  
```

---

## **🚀 Solution Approach**  
This problem can be solved using **custom sorting**:  
- Convert the numbers to strings for easy manipulation.  
- Define a **custom comparator** to determine the order of concatenation.  
- Sort the array using this comparator.  
- Edge Case: If the largest number is `0`, return `"0"` instead of `"000"`.  

---

## **📝 Optimized Python Solution**  
```python
from functools import cmp_to_key

class Solution:
    def largestNumber(self, nums):
        # Custom comparator function
        def compare(x, y):
            return -1 if x + y > y + x else 1

        # Convert integers to strings and sort using custom comparison
        nums = list(map(str, nums))
        nums.sort(key=cmp_to_key(compare))

        # Join sorted numbers and return the result
        result = "".join(nums)

        # Handle case where leading zeroes could appear (e.g., [0,0])
        return "0" if result[0] == "0" else result

# Example usage
sol = Solution()
print(sol.largestNumber([10,2]))  # Output: "210"
print(sol.largestNumber([3,30,34,5,9]))  # Output: "9534330"
```

---

## **⏳ Time & Space Complexity**  
✅ **Time Complexity:** `O(n log n)`, due to sorting.  
✅ **Space Complexity:** `O(n)`, for storing string representations.  

---

## **⭐ Follow for More**  
If you found this helpful, **⭐ star** the repo and follow me on GitHub! 🚀😊  

---
